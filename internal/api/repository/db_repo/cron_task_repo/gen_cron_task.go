///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package cron_task_repo

import (
	"fmt"
	"time"

	"github.com/skyzhouzj/xhframwork/internal/api/repository/db_repo"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *CronTask {
	return new(CronTask)
}

func NewQueryBuilder() *cronTaskRepoQueryBuilder {
	return new(cronTaskRepoQueryBuilder)
}

func (t *CronTask) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type cronTaskRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *cronTaskRepoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *cronTaskRepoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&CronTask{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *cronTaskRepoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&CronTask{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *cronTaskRepoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&CronTask{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *cronTaskRepoQueryBuilder) First(db *gorm.DB) (*CronTask, error) {
	ret := &CronTask{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *cronTaskRepoQueryBuilder) QueryOne(db *gorm.DB) (*CronTask, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *cronTaskRepoQueryBuilder) QueryAll(db *gorm.DB) ([]*CronTask, error) {
	var ret []*CronTask
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *cronTaskRepoQueryBuilder) Limit(limit int) *cronTaskRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *cronTaskRepoQueryBuilder) Offset(offset int) *cronTaskRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereId(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereIdIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereIdNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderById(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereName(p db_repo.Predicate, value string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNameIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNameNotIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByName(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereSpec(p db_repo.Predicate, value string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "spec", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereSpecIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "spec", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereSpecNotIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "spec", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderBySpec(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "spec "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCommand(p db_repo.Predicate, value string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "command", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCommandIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "command", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCommandNotIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "command", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByCommand(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "command "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereProtocol(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "protocol", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereProtocolIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "protocol", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereProtocolNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "protocol", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByProtocol(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "protocol "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereHttpMethod(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "http_method", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereHttpMethodIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "http_method", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereHttpMethodNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "http_method", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByHttpMethod(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "http_method "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereTimeout(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "timeout", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereTimeoutIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "timeout", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereTimeoutNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "timeout", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByTimeout(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "timeout "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRetryTimes(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "retry_times", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRetryTimesIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "retry_times", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRetryTimesNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "retry_times", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByRetryTimes(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "retry_times "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRetryInterval(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "retry_interval", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRetryIntervalIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "retry_interval", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRetryIntervalNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "retry_interval", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByRetryInterval(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "retry_interval "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyStatus(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_status", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyStatusIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_status", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyStatusNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByNotifyStatus(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "notify_status "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyType(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_type", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyTypeIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_type", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyTypeNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByNotifyType(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "notify_type "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyReceiverEmail(p db_repo.Predicate, value string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_receiver_email", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyReceiverEmailIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_receiver_email", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyReceiverEmailNotIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_receiver_email", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByNotifyReceiverEmail(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "notify_receiver_email "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyKeyword(p db_repo.Predicate, value string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_keyword", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyKeywordIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_keyword", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereNotifyKeywordNotIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_keyword", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByNotifyKeyword(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "notify_keyword "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRemark(p db_repo.Predicate, value string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRemarkIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereRemarkNotIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByRemark(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "remark "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereIsUsed(p db_repo.Predicate, value int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereIsUsedIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereIsUsedNotIn(value []int32) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByIsUsed(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_used "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCreatedAt(p db_repo.Predicate, value time.Time) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByCreatedAt(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCreatedUser(p db_repo.Predicate, value string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCreatedUserIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereCreatedUserNotIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByCreatedUser(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_user "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereUpdatedAt(p db_repo.Predicate, value time.Time) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByUpdatedAt(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereUpdatedUser(p db_repo.Predicate, value string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", p),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereUpdatedUserIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) WhereUpdatedUserNotIn(value []string) *cronTaskRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *cronTaskRepoQueryBuilder) OrderByUpdatedUser(asc bool) *cronTaskRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_user "+order)
	return qb
}
